// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pronounce.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pronounce_PronounceRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PronounceRequest"

  var speech: Data = SwiftProtobuf.Internal.emptyData

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.speech)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.speech.isEmpty {
      try visitor.visitSingularBytesField(value: self.speech, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Pronounce_MatchingInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MatchingInfo"

  var phoneme: String = String()

  var comparedPhoneme: String = String()

  var distance: Float = 0

  var index: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.phoneme)
      case 2: try decoder.decodeSingularStringField(value: &self.comparedPhoneme)
      case 3: try decoder.decodeSingularFloatField(value: &self.distance)
      case 4: try decoder.decodeSingularInt32Field(value: &self.index)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneme.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneme, fieldNumber: 1)
    }
    if !self.comparedPhoneme.isEmpty {
      try visitor.visitSingularStringField(value: self.comparedPhoneme, fieldNumber: 2)
    }
    if self.distance != 0 {
      try visitor.visitSingularFloatField(value: self.distance, fieldNumber: 3)
    }
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Pronounce_WordResult: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".WordResult"

  var score: Float = 0

  var word: String = String()

  var matched: [Pronounce_MatchingInfo] = []

  var notMatched: [Pronounce_MatchingInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.score)
      case 2: try decoder.decodeSingularStringField(value: &self.word)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.matched)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.notMatched)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 1)
    }
    if !self.word.isEmpty {
      try visitor.visitSingularStringField(value: self.word, fieldNumber: 2)
    }
    if !self.matched.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.matched, fieldNumber: 3)
    }
    if !self.notMatched.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.notMatched, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Pronounce_TopPrediction: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TopPrediction"

  var text: String = String()

  var distance: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.text)
      case 2: try decoder.decodeSingularFloatField(value: &self.distance)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.distance != 0 {
      try visitor.visitSingularFloatField(value: self.distance, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Pronounce_PronounceResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PronounceResponse"

  var score: Float = 0

  var prediction: String = String()

  var wordResults: [Pronounce_WordResult] = []

  var topPredictions: [Pronounce_TopPrediction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.score)
      case 2: try decoder.decodeSingularStringField(value: &self.prediction)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.wordResults)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.topPredictions)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 1)
    }
    if !self.prediction.isEmpty {
      try visitor.visitSingularStringField(value: self.prediction, fieldNumber: 2)
    }
    if !self.wordResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.wordResults, fieldNumber: 3)
    }
    if !self.topPredictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.topPredictions, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pronounce"

extension Pronounce_PronounceRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "speech"),
    2: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: Pronounce_PronounceRequest) -> Bool {
    if self.speech != other.speech {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_MatchingInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phoneme"),
    2: .same(proto: "comparedPhoneme"),
    3: .same(proto: "distance"),
    4: .same(proto: "index"),
  ]

  func _protobuf_generated_isEqualTo(other: Pronounce_MatchingInfo) -> Bool {
    if self.phoneme != other.phoneme {return false}
    if self.comparedPhoneme != other.comparedPhoneme {return false}
    if self.distance != other.distance {return false}
    if self.index != other.index {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_WordResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "score"),
    2: .same(proto: "word"),
    3: .same(proto: "matched"),
    4: .same(proto: "notMatched"),
  ]

  func _protobuf_generated_isEqualTo(other: Pronounce_WordResult) -> Bool {
    if self.score != other.score {return false}
    if self.word != other.word {return false}
    if self.matched != other.matched {return false}
    if self.notMatched != other.notMatched {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_TopPrediction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "distance"),
  ]

  func _protobuf_generated_isEqualTo(other: Pronounce_TopPrediction) -> Bool {
    if self.text != other.text {return false}
    if self.distance != other.distance {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_PronounceResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "score"),
    2: .same(proto: "prediction"),
    3: .same(proto: "wordResults"),
    4: .same(proto: "topPredictions"),
  ]

  func _protobuf_generated_isEqualTo(other: Pronounce_PronounceResponse) -> Bool {
    if self.score != other.score {return false}
    if self.prediction != other.prediction {return false}
    if self.wordResults != other.wordResults {return false}
    if self.topPredictions != other.topPredictions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
