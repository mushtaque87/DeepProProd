// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pronunciation.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pronounce_PronounceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var speech: Data = SwiftProtobuf.Internal.emptyData

  var text: String = String()

  var userID: String = String()

  var authToken: String = String()

  var studentID: String = String()

  var assignmentID: Int32 = 0

  var unitID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pronounce_MatchingInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var phoneme: String = String()

  var comparedPhoneme: String = String()

  var distance: Float = 0

  var index: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pronounce_WordResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var score: Float = 0

  var word: String = String()

  var matched: [Pronounce_MatchingInfo] = []

  var notMatched: [Pronounce_MatchingInfo] = []

  var wordPhonemes: [String] = []

  var predictedPhonemes: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pronounce_TopPrediction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var distance: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pronounce_Alignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var actual: String = String()

  var predicted: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pronounce_PronounceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var score: Float {
    get {return _storage._score}
    set {_uniqueStorage()._score = newValue}
  }

  var actual: String {
    get {return _storage._actual}
    set {_uniqueStorage()._actual = newValue}
  }

  var predicted: String {
    get {return _storage._predicted}
    set {_uniqueStorage()._predicted = newValue}
  }

  var alignment: Pronounce_Alignment {
    get {return _storage._alignment ?? Pronounce_Alignment()}
    set {_uniqueStorage()._alignment = newValue}
  }
  /// Returns true if `alignment` has been explicitly set.
  var hasAlignment: Bool {return _storage._alignment != nil}
  /// Clears the value of `alignment`. Subsequent reads from it will return its default value.
  mutating func clearAlignment() {_storage._alignment = nil}

  var wordResults: [Pronounce_WordResult] {
    get {return _storage._wordResults}
    set {_uniqueStorage()._wordResults = newValue}
  }

  var topPredictions: [Pronounce_TopPrediction] {
    get {return _storage._topPredictions}
    set {_uniqueStorage()._topPredictions = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pronounce"

extension Pronounce_PronounceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PronounceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "speech"),
    2: .same(proto: "text"),
    3: .same(proto: "userId"),
    4: .same(proto: "authToken"),
    5: .same(proto: "studentId"),
    6: .same(proto: "assignmentId"),
    7: .same(proto: "unitId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.speech)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      case 3: try decoder.decodeSingularStringField(value: &self.userID)
      case 4: try decoder.decodeSingularStringField(value: &self.authToken)
      case 5: try decoder.decodeSingularStringField(value: &self.studentID)
      case 6: try decoder.decodeSingularInt32Field(value: &self.assignmentID)
      case 7: try decoder.decodeSingularInt32Field(value: &self.unitID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.speech.isEmpty {
      try visitor.visitSingularBytesField(value: self.speech, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 3)
    }
    if !self.authToken.isEmpty {
      try visitor.visitSingularStringField(value: self.authToken, fieldNumber: 4)
    }
    if !self.studentID.isEmpty {
      try visitor.visitSingularStringField(value: self.studentID, fieldNumber: 5)
    }
    if self.assignmentID != 0 {
      try visitor.visitSingularInt32Field(value: self.assignmentID, fieldNumber: 6)
    }
    if self.unitID != 0 {
      try visitor.visitSingularInt32Field(value: self.unitID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Pronounce_PronounceRequest) -> Bool {
    if self.speech != other.speech {return false}
    if self.text != other.text {return false}
    if self.userID != other.userID {return false}
    if self.authToken != other.authToken {return false}
    if self.studentID != other.studentID {return false}
    if self.assignmentID != other.assignmentID {return false}
    if self.unitID != other.unitID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_MatchingInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MatchingInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phoneme"),
    2: .same(proto: "comparedPhoneme"),
    3: .same(proto: "distance"),
    4: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.phoneme)
      case 2: try decoder.decodeSingularStringField(value: &self.comparedPhoneme)
      case 3: try decoder.decodeSingularFloatField(value: &self.distance)
      case 4: try decoder.decodeSingularInt32Field(value: &self.index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneme.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneme, fieldNumber: 1)
    }
    if !self.comparedPhoneme.isEmpty {
      try visitor.visitSingularStringField(value: self.comparedPhoneme, fieldNumber: 2)
    }
    if self.distance != 0 {
      try visitor.visitSingularFloatField(value: self.distance, fieldNumber: 3)
    }
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Pronounce_MatchingInfo) -> Bool {
    if self.phoneme != other.phoneme {return false}
    if self.comparedPhoneme != other.comparedPhoneme {return false}
    if self.distance != other.distance {return false}
    if self.index != other.index {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_WordResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WordResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "score"),
    2: .same(proto: "word"),
    3: .same(proto: "matched"),
    4: .same(proto: "notMatched"),
    5: .same(proto: "wordPhonemes"),
    6: .same(proto: "predictedPhonemes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.score)
      case 2: try decoder.decodeSingularStringField(value: &self.word)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.matched)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.notMatched)
      case 5: try decoder.decodeRepeatedStringField(value: &self.wordPhonemes)
      case 6: try decoder.decodeRepeatedStringField(value: &self.predictedPhonemes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 1)
    }
    if !self.word.isEmpty {
      try visitor.visitSingularStringField(value: self.word, fieldNumber: 2)
    }
    if !self.matched.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.matched, fieldNumber: 3)
    }
    if !self.notMatched.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.notMatched, fieldNumber: 4)
    }
    if !self.wordPhonemes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.wordPhonemes, fieldNumber: 5)
    }
    if !self.predictedPhonemes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.predictedPhonemes, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Pronounce_WordResult) -> Bool {
    if self.score != other.score {return false}
    if self.word != other.word {return false}
    if self.matched != other.matched {return false}
    if self.notMatched != other.notMatched {return false}
    if self.wordPhonemes != other.wordPhonemes {return false}
    if self.predictedPhonemes != other.predictedPhonemes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_TopPrediction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopPrediction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "distance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.text)
      case 2: try decoder.decodeSingularFloatField(value: &self.distance)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.distance != 0 {
      try visitor.visitSingularFloatField(value: self.distance, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Pronounce_TopPrediction) -> Bool {
    if self.text != other.text {return false}
    if self.distance != other.distance {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_Alignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Alignment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actual"),
    2: .same(proto: "predicted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.actual)
      case 2: try decoder.decodeSingularStringField(value: &self.predicted)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.actual.isEmpty {
      try visitor.visitSingularStringField(value: self.actual, fieldNumber: 1)
    }
    if !self.predicted.isEmpty {
      try visitor.visitSingularStringField(value: self.predicted, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Pronounce_Alignment) -> Bool {
    if self.actual != other.actual {return false}
    if self.predicted != other.predicted {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Pronounce_PronounceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PronounceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "score"),
    2: .same(proto: "actual"),
    3: .same(proto: "predicted"),
    4: .same(proto: "alignment"),
    5: .same(proto: "wordResults"),
    6: .same(proto: "topPredictions"),
  ]

  fileprivate class _StorageClass {
    var _score: Float = 0
    var _actual: String = String()
    var _predicted: String = String()
    var _alignment: Pronounce_Alignment? = nil
    var _wordResults: [Pronounce_WordResult] = []
    var _topPredictions: [Pronounce_TopPrediction] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _score = source._score
      _actual = source._actual
      _predicted = source._predicted
      _alignment = source._alignment
      _wordResults = source._wordResults
      _topPredictions = source._topPredictions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &_storage._score)
        case 2: try decoder.decodeSingularStringField(value: &_storage._actual)
        case 3: try decoder.decodeSingularStringField(value: &_storage._predicted)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._alignment)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._wordResults)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._topPredictions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._score != 0 {
        try visitor.visitSingularFloatField(value: _storage._score, fieldNumber: 1)
      }
      if !_storage._actual.isEmpty {
        try visitor.visitSingularStringField(value: _storage._actual, fieldNumber: 2)
      }
      if !_storage._predicted.isEmpty {
        try visitor.visitSingularStringField(value: _storage._predicted, fieldNumber: 3)
      }
      if let v = _storage._alignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._wordResults.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._wordResults, fieldNumber: 5)
      }
      if !_storage._topPredictions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._topPredictions, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Pronounce_PronounceResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._score != other_storage._score {return false}
        if _storage._actual != other_storage._actual {return false}
        if _storage._predicted != other_storage._predicted {return false}
        if _storage._alignment != other_storage._alignment {return false}
        if _storage._wordResults != other_storage._wordResults {return false}
        if _storage._topPredictions != other_storage._topPredictions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
